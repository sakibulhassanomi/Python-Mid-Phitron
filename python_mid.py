# -*- coding: utf-8 -*-
"""PythoN mid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z7wmKhyRgXr_1nZCFbjLuwCI97SdQqZ3

**The** Library class
"""

class Library:
    __book_list = []

    def entry_book(cls, book):
        cls.__book_list.append(book)

    def get_book_list(cls):
        return cls.__book_list

"""**The** Book class"""

class Book:
    def __init__(self, book_id, title, author):
        self._book_id = book_id
        self._title = title
        self._author = author
        self._availability = True
        Library.entry_book(self)

"""**Initialize Book Object**"""

book1 = Book(1, "To Kill a Mockingbird", "Harper Lee")
book2 = Book(2, "1984", "George Orwell")
book3 = Book(3, "The Great Gatsby", "F. Scott Fitzgerald")
for book in Library.book_list:
    print(f"ID: {book._book_id}, Title: {book._title}, Author: {book._author}")

"""**Implement borrow_book() method**"""

class Book:
    def borrow_book(self):
        if self._availability:
            self._availability = False
            print(f"The book '{self._title}' has been borrowed.")
        else:
            print(f"Sorry, the book '{self._title}' is already borrowed.")

"""**Implement return_book() method**

"""

class Book:
    def return_book(self):
        if not self._availability:
            self._availability = True
            print(f"The book '{self._title}' has been returned.")
        else:
            print(f"The book '{self._title}' was not borrowed.")

"""**Implement view_book_info() method**"""

class Book:
    def view_book_info(self):
        availability_status = "Available" if self._availability else "Not Available"
        print(f"Book ID: {self._book_id}")
        print(f"Title: {self._title}")
        print(f"Author: {self._author}")
        print(f"Availability: {availability_status}")

"""**Menu System**"""

def menu():
    while True:
        print("\nMenu:")
        print("1. View All Books")
        print("2. Borrow Book")
        print("3. Return Book")
        print("4. Exit")
        choice = input("Enter your choice (1/2/3/4): ")

        if choice == '1':
            if Library.book_list:
                for book in Library.book_list:
                    book.view_book_info()
            else:
                print("No books available in the library.")

        elif choice == '2':
            try:
                book_id = int(input("Enter Book ID to borrow: "))
                book_found = False
                for book in Library.book_list:
                    if book._book_id == book_id:
                        book_found = True
                        book.borrow_book()
                        break
                if not book_found:
                    print("Invalid Book ID. Please try again.")
            except ValueError:
                print("Invalid input. Please enter a numeric book ID.")

        elif choice == '3':
            try:
                book_id = int(input("Enter Book ID to return: "))
                book_found = False
                for book in Library.book_list:
                    if book._book_id == book_id:
                        book_found = True
                        book.return_book()
                        break
                if not book_found:
                    print("Invalid Book ID. Please try again.")
            except ValueError:
                print("Invalid input. Please enter a numeric book ID.")

        elif choice == '4':
            print("Exiting the system. Thank you!")
            break

        else:
            print("Invalid choice. Please try again.")

"""**Error Handling**"""

class Library:
    book_list = []

    def entry_book(cls, book):
        cls.book_list.append(book)

class Book:
    def __init__(self, book_id, title, author):
        self._book_id = book_id
        self._title = title
        self._author = author
        self._availability = True
        Library.entry_book(Library, self)

    def borrow_book(self):
        if not self._availability:
            print(f"Error: The book '{self._title}' is already borrowed.")
        else:
            self._availability = False
            print(f"The book '{self._title}' has been borrowed.")

    def return_book(self):
        if self._availability:
            print(f"Error: The book '{self._title}' was not borrowed.")
        else:
            self._availability = True
            print(f"The book '{self._title}' has been returned.")

    def view_book_info(self):
        availability_status = "Available" if self._availability else "Not Available"
        print(f"Book ID: {self._book_id}")
        print(f"Title: {self._title}")
        print(f"Author: {self._author}")
        print(f"Availability: {availability_status}")

def menu():
    while True:
        print("\nMenu:")
        print("1. View All Books")
        print("2. Borrow Book")
        print("3. Return Book")
        print("4. Exit")
        choice = input("Enter your choice (1/2/3/4): ")

        if choice == '1':
            if Library.book_list:
                for book in Library.book_list:
                    book.view_book_info()
            else:
                print("No books available in the library.")

        elif choice == '2':
            try:
                book_id = int(input("Enter Book ID to borrow: "))
                book_found = False
                for book in Library.book_list:
                    if book._book_id == book_id:
                        book_found = True
                        book.borrow_book()
                        break
                if not book_found:
                    print("Error: Invalid Book ID. Please try again.")
            except ValueError:
                print("Error: Invalid input. Please enter a numeric book ID.")

        elif choice == '3':
            try:
                book_id = int(input("Enter Book ID to return: "))
                book_found = False
                for book in Library.book_list:
                    if book._book_id == book_id:
                        book_found = True
                        book.return_book()
                        break
                if not book_found:
                    print("Error: Invalid Book ID. Please try again.")
            except ValueError:
                print("Error: Invalid input. Please enter a numeric book ID.")

        elif choice == '4':
            print("Exiting the system. Thank you!")
            break

        else:
            print("Error: Invalid choice. Please try again.")

book1 = Book(1, "To Kill a Mockingbird", "Harper Lee")
book2 = Book(2, "1984", "George Orwell")
book3 = Book(3, "The Great Gatsby", "F. Scott Fitzgerald")

menu()

"""**Data Privacy**"""

class Book:
    def __init__(self, book_id, title, author):
        self._book_id = book_id
        self._title = title
        self._author = author
        self._availability = True